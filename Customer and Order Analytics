#In this SQL, I'm querying a database with multiple tables containing customer and order data and efficiently pulling info to answer each question.

#1. How many orders were placed in January? 

SELECT count(orderID) FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

#2. How many of those orders were for an iPhone?

SELECT count(orderID) FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length(orderID) = 6
AND orderID <> 'Order ID';

#3. Select the customer account numbers for all the orders that were placed in February.

SELECT DISTINCT acctnum
FROM BIT_DB.customers
INNER JOIN BIT_DB.FebSales Feb
ON customers.order_id = Feb.orderID
WHERE length(orderid) = 6 
AND orderID <> 'Order ID';

#4. Which product was the cheapest one sold in January, and what was the price? 

SELECT DISTINCT Product, price
FROM BIT_DB.JanSales
WHERE  price IN (SELECT min(price) FROM BIT_DB.JanSales);

#5. What is the total revenue for each product sold in January?

SELECT SUM(quantity) * price AS revenue,product
FROM BIT_DB.JanSales
GROUP BY product;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT Product, SUM(quantity), SUM(quantity) * price 
AS Revenue FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers?

SELECT COUNT(DISTINCT customers.acctnum)
AS Number_of_customers, 
AVG(quantity * price)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderid = customers.order_id
WHERE FebSales.Quantity > 2
AND LENGTH(orderID) = 6 
AND orderid <> 'Order ID'






